"""
Django settings for mcur project.

Generated by 'django-admin startproject' using Django 3.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
from celery.app.amqp import Queue, Exchange
from django.utils.log import DEFAULT_LOGGING
from sys import platform
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'fqovv=(m$_j)qy)exjeo1#z(1u0r-s1@*(=^)%xgh^od%cf_)3'

SKIOG_VERSION = '0.3.0'

# SECURITY WARNING: don't run with debug turned on in production!
if 'linux' in platform.lower():
    DEBUG = False
else:
    DEBUG = True

ALLOWED_HOSTS = [
'127.0.0.1',
'192.168.10.82',
'192.168.10.25',
'skiog.ru',
'local.skiog.ru'
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'grappelli',
    'bootstrap3',
    'bootstrap4',
    'django_tables2',
    'rest_framework',
    'corsheaders',
    'problem.apps.ProblemConfig',
    'parsers.apps.ParsersConfig',
    'chat.apps.ChatConfig',
    'crispy_forms',
    'tinymce',
    'django_filters',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'mcur.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
                'problem.centext_processors.basic',
            ],
        },
    },
]

WSGI_APPLICATION = 'mcur.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mcur',
        'USER': 'django',
        'PASSWORD': '211563',
        'HOST': '176.62.188.10',
        'PORT': '54133',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/
ugettext = lambda s: s

LANGUAGES = (
    ('ru', ugettext(u'Русский')),
)

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
#MEDIA_ROOT = os.path.join(BASE_DIR, 'files', 'media') #Windows media
if 'linux' in platform.lower():
    MEDIA_ROOT = '/home/media/' #Linux media
    STATIC_ROOT = '/home/static/'
else:
    MEDIA_ROOT = 'C:/www/media/'
    STATIC_ROOT = 'C:/www/static/'
MEDIA_URL = '/media/'
STATIC_URL = '/static/'

#    'C:/GitHub/cur-problem/mcur/problem/static',
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'problem/static'),
]

STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

CORS_ORIGIN_ALLOW_ALL = True
CORS_URLS_REGEX = r'^/api/.*$'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] {message}',
            'style': '{',
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'file': {
            'level': 'INFO',
            'formatter': 'django.server',
            'class': 'logging.FileHandler',
            'filename': f'{MEDIA_ROOT}info.log',
        },
        'file_error': {
            'level': 'ERROR',
            'formatter': 'django.server',
            'class': 'logging.FileHandler',
            'filename': f'{MEDIA_ROOT}error.log',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'mail_admins'],
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': False,
        },
        "django.request": {
             "handlers": ["mail_admins", "file_error"],
             "level": "ERROR",
             "propagate": True
        },
        'file': {
            "handlers": ["file"],
            "level": "INFO",
            "propagate": True
        }
    }
}

CRISPY_TEMPLATE_PACK = 'bootstrap4'

LOGIN_REDIRECT_URL =  '/index/'

LOGIN_URL = '/login/'

# Email
EMAIL_USE_SSL = True
EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = 'noreply@skiog.ru'
EMAIL_HOST_PASSWORD = 'W3y71PVTGM6JR409UCie4TBNvJtUcvwZ'
DEFAULT_FROM_EMAIL = 'noreply@skiog.ru'
DEFAULT_TO_EMAIL = 'noreply@skiog.ru'

# Celery
CELERY_BROKER_URL = 'amqp://localhost'
CELERY_QUEUES = (
    Queue('high', Exchange('high'), routing_key='high'),
    Queue('normal', Exchange('normal'), routing_key='normal'),
    Queue('low', Exchange('low'), routing_key='low'),
)
CELERY_DEFAULT_QUEUE = 'normal'
CELERY_DEFAULT_EXCHANGE = 'normal'
CELERY_DEFAULT_ROUTING_KEY = 'normal'
CELERY_ROUTES = {
    # -- HIGH PRIORITY QUEUE -- #
    'myapp.tasks.check_payment_status': {'queue': 'high'},
    # -- LOW PRIORITY QUEUE -- #
    'myapp.tasks.close_session': {'queue': 'low'},
}

NO_VISIBLE_1 = [5, 6, 7]
NO_VISIBLE_2 = [10, 1, 4, 11, 12, 3, 13]
NO_VISIBLE = [NO_VISIBLE_1, NO_VISIBLE_2]